//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(SG.DAS.DAL.DASContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsb7c58cd409ced8e47e06dacab277c00c1eeae5d4e614c42da088d97787ee36d4))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsb7c58cd409ced8e47e06dacab277c00c1eeae5d4e614c42da088d97787ee36d4 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "b7c58cd409ced8e47e06dacab277c00c1eeae5d4e614c42da088d97787ee36d4"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Audit")
            {
                return GetView0();
            }

            if (extentName == "DASContext.Audits")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.AppSystem")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.User1")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Task")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.TaskType")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.UserAppSystem")
            {
                return GetView7();
            }

            if (extentName == "DASContext.Systems")
            {
                return GetView8();
            }

            if (extentName == "DASContext.Users")
            {
                return GetView9();
            }

            if (extentName == "DASContext.Tasks")
            {
                return GetView10();
            }

            if (extentName == "DASContext.Task_Supervisor")
            {
                return GetView11();
            }

            if (extentName == "DASContext.Task_System")
            {
                return GetView12();
            }

            if (extentName == "DASContext.Task_TaskType")
            {
                return GetView13();
            }

            if (extentName == "DASContext.Task_User")
            {
                return GetView14();
            }

            if (extentName == "DASContext.TaskTypes")
            {
                return GetView15();
            }

            if (extentName == "DASContext.User_AppSystems")
            {
                return GetView16();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Audit.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Audit
        [CodeFirstDatabaseSchema.Audit](T1.Audit_AuditId, T1.Audit_EntityName, T1.Audit_PropertyName, T1.Audit_AuditDate)
    FROM (
        SELECT 
            T.AuditId AS Audit_AuditId, 
            T.EntityName AS Audit_EntityName, 
            T.PropertyName AS Audit_PropertyName, 
            T.AuditDate AS Audit_AuditDate, 
            True AS _from0
        FROM DASContext.Audits AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DASContext.Audits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Audits
        [SG.DAS.DAL.Audit](T1.Audit_AuditId, T1.Audit_EntityName, T1.Audit_PropertyName, T1.Audit_AuditDate)
    FROM (
        SELECT 
            T.AuditId AS Audit_AuditId, 
            T.EntityName AS Audit_EntityName, 
            T.PropertyName AS Audit_PropertyName, 
            T.AuditDate AS Audit_AuditDate, 
            True AS _from0
        FROM CodeFirstDatabase.Audit AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AppSystem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AppSystem
        [CodeFirstDatabaseSchema.AppSystem](T1.AppSystem_AppSystemId, T1.AppSystem_SystemName)
    FROM (
        SELECT 
            T.AppSystemId AS AppSystem_AppSystemId, 
            T.SystemName AS AppSystem_SystemName, 
            True AS _from0
        FROM DASContext.Systems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T1.User_UserId, T1.User_FirstName, T1.User_LastName, T1.[User.Address_Street], T1.[User.Address_City], T1.[User.Address_Country], T1.User_Birthday, T1.User_Note, T1.User_Position)
    FROM (
        SELECT 
            T.UserId AS User_UserId, 
            T.FirstName AS User_FirstName, 
            T.LastName AS User_LastName, 
            T.Address.Street AS [User.Address_Street], 
            T.Address.City AS [User.Address_City], 
            T.Address.Country AS [User.Address_Country], 
            T.Birthday AS User_Birthday, 
            T.Note AS User_Note, 
            T.Position AS User_Position, 
            True AS _from0
        FROM DASContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User1
        [CodeFirstDatabaseSchema.User1](T1.User1_UserId, T1.User1_Photo)
    FROM (
        SELECT 
            T.UserId AS User1_UserId, 
            T.Photo AS User1_Photo, 
            True AS _from0
        FROM DASContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Task.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Task
        [CodeFirstDatabaseSchema.Task](T6.Task_TaskId, T6.Task_TaskName, T6.Task_Deadline, T6.Task_Status, T6.Task_Note, T6.Task_CreateDate, T6.Task_Timestamp, T6.[Task.Supervisor_UserId], T6.[Task.System_AppSystemId], T6.[Task.TaskType_TaskTypeId], T6.[Task.User_UserId])
    FROM (
        SELECT T1.Task_TaskId, T1.Task_TaskName, T1.Task_Deadline, T1.Task_Status, T1.Task_Note, T1.Task_CreateDate, T1.Task_Timestamp, T5.[Task.Supervisor_UserId], T4.[Task.System_AppSystemId], T3.[Task.TaskType_TaskTypeId], T2.[Task.User_UserId], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T5._from2 AND T5._from2 IS NOT NULL) AS _from2, (T4._from3 AND T4._from3 IS NOT NULL) AS _from3, (T3._from4 AND T3._from4 IS NOT NULL) AS _from4
        FROM  (
            SELECT 
                T.TaskId AS Task_TaskId, 
                T.TaskName AS Task_TaskName, 
                T.Deadline AS Task_Deadline, 
                CAST(T.Status AS [Edm.Int32]) AS Task_Status, 
                T.Note AS Task_Note, 
                T.CreateDate AS Task_CreateDate, 
                T.Timestamp AS Task_Timestamp, 
                True AS _from0
            FROM DASContext.Tasks AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Task_User_Source).TaskId AS Task_TaskId, 
                Key(T.Task_User_Target).UserId AS [Task.User_UserId], 
                True AS _from1
            FROM DASContext.Task_User AS T) AS T2
            ON T1.Task_TaskId = T2.Task_TaskId
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Task_TaskType_Source).TaskId AS Task_TaskId, 
                Key(T.Task_TaskType_Target).TaskTypeId AS [Task.TaskType_TaskTypeId], 
                True AS _from4
            FROM DASContext.Task_TaskType AS T) AS T3
            ON T1.Task_TaskId = T3.Task_TaskId
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Task_System_Source).TaskId AS Task_TaskId, 
                Key(T.Task_System_Target).AppSystemId AS [Task.System_AppSystemId], 
                True AS _from3
            FROM DASContext.Task_System AS T) AS T4
            ON T1.Task_TaskId = T4.Task_TaskId
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Task_Supervisor_Source).TaskId AS Task_TaskId, 
                Key(T.Task_Supervisor_Target).UserId AS [Task.Supervisor_UserId], 
                True AS _from2
            FROM DASContext.Task_Supervisor AS T) AS T5
            ON T1.Task_TaskId = T5.Task_TaskId
    ) AS T6");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TaskType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskType
        [CodeFirstDatabaseSchema.TaskType](T1.TaskType_TaskTypeId, T1.TaskType_TaskTypeName)
    FROM (
        SELECT 
            T.TaskTypeId AS TaskType_TaskTypeId, 
            T.TaskTypeName AS TaskType_TaskTypeName, 
            True AS _from0
        FROM DASContext.TaskTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserAppSystem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserAppSystem
        [CodeFirstDatabaseSchema.UserAppSystem](T1.[UserAppSystem.User_UserId], T1.[UserAppSystem.AppSystem_AppSystemId])
    FROM (
        SELECT 
            Key(T.User_AppSystems_Source).UserId AS [UserAppSystem.User_UserId], 
            Key(T.User_AppSystems_Target).AppSystemId AS [UserAppSystem.AppSystem_AppSystemId], 
            True AS _from0
        FROM DASContext.User_AppSystems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DASContext.Systems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Systems
        [SG.DAS.DAL.AppSystem](T1.AppSystem_AppSystemId, T1.AppSystem_SystemName)
    FROM (
        SELECT 
            T.AppSystemId AS AppSystem_AppSystemId, 
            T.SystemName AS AppSystem_SystemName, 
            True AS _from0
        FROM CodeFirstDatabase.AppSystem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DASContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [SG.DAS.DAL.User](T4.User_UserId, T4.User_FirstName, T4.User_LastName, T4.User_Address, T4.User_Birthday, T4.User_Note, T4.User_Position, T4.User_Photo)
    FROM (
        SELECT -- Constructing Address
            T3.User_UserId, 
            T3.User_FirstName, 
            T3.User_LastName, 
            [SG.DAS.DAL.Address](T3.User_Address_Street, T3.User_Address_City, T3.User_Address_Country) AS User_Address, 
            T3.User_Birthday, 
            T3.User_Note, 
            T3.User_Position, 
            T3.User_Photo
        FROM (
            SELECT T1.User_UserId, T2.User_FirstName, T2.User_LastName, T2.User_Address_Street, T2.User_Address_City, T2.User_Address_Country, T2.User_Birthday, T2.User_Note, T2.User_Position, T1.User_Photo, T2._from0, T1._from1
            FROM  (
                SELECT 
                    T.UserId AS User_UserId, 
                    T.Photo AS User_Photo, 
                    True AS _from1
                FROM CodeFirstDatabase.User1 AS T) AS T1
                INNER JOIN (
                SELECT 
                    T.UserId AS User_UserId, 
                    T.FirstName AS User_FirstName, 
                    T.LastName AS User_LastName, 
                    T.Address_Street AS User_Address_Street, 
                    T.Address_City AS User_Address_City, 
                    T.Address_Country AS User_Address_Country, 
                    T.Birthday AS User_Birthday, 
                    T.Note AS User_Note, 
                    T.Position AS User_Position, 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T) AS T2
                ON T1.User_UserId = T2.User_UserId
        ) AS T3
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for DASContext.Tasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tasks
        [SG.DAS.DAL.Task](T1.Task_TaskId, T1.Task_TaskName, T1.Task_Deadline, T1.Task_Status, T1.Task_Note, T1.Task_CreateDate, T1.Task_Timestamp) WITH 
        RELATIONSHIP(CREATEREF(DASContext.Users, ROW(T1.[Task_Supervisor.Task_Supervisor_Target.UserId]),[SG.DAS.DAL.User]),[SG.DAS.DAL.Task_Supervisor],Task_Supervisor_Source,Task_Supervisor_Target) 
        RELATIONSHIP(CREATEREF(DASContext.Systems, ROW(T1.[Task_System.Task_System_Target.AppSystemId]),[SG.DAS.DAL.AppSystem]),[SG.DAS.DAL.Task_System],Task_System_Source,Task_System_Target) 
        RELATIONSHIP(CREATEREF(DASContext.TaskTypes, ROW(T1.[Task_TaskType.Task_TaskType_Target.TaskTypeId]),[SG.DAS.DAL.TaskType]),[SG.DAS.DAL.Task_TaskType],Task_TaskType_Source,Task_TaskType_Target) 
        RELATIONSHIP(CREATEREF(DASContext.Users, ROW(T1.[Task_User.Task_User_Target.UserId]),[SG.DAS.DAL.User]),[SG.DAS.DAL.Task_User],Task_User_Source,Task_User_Target) 
    FROM (
        SELECT 
            T.TaskId AS Task_TaskId, 
            T.TaskName AS Task_TaskName, 
            T.Deadline AS Task_Deadline, 
            CAST(T.Status AS [SG.DAS.DAL.TaskStatus]) AS Task_Status, 
            T.Note AS Task_Note, 
            T.CreateDate AS Task_CreateDate, 
            T.Timestamp AS Task_Timestamp, 
            True AS _from0, 
            T.Supervisor_UserId AS [Task_Supervisor.Task_Supervisor_Target.UserId], 
            T.System_AppSystemId AS [Task_System.Task_System_Target.AppSystemId], 
            T.TaskType_TaskTypeId AS [Task_TaskType.Task_TaskType_Target.TaskTypeId], 
            T.User_UserId AS [Task_User.Task_User_Target.UserId]
        FROM CodeFirstDatabase.Task AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DASContext.Task_Supervisor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Task_Supervisor
        [SG.DAS.DAL.Task_Supervisor](T3.[Task_Supervisor.Task_Supervisor_Source], T3.[Task_Supervisor.Task_Supervisor_Target])
    FROM (
        SELECT -- Constructing Task_Supervisor_Source
            CreateRef(DASContext.Tasks, row(T2.[Task_Supervisor.Task_Supervisor_Source.TaskId]), [SG.DAS.DAL.Task]) AS [Task_Supervisor.Task_Supervisor_Source], 
            T2.[Task_Supervisor.Task_Supervisor_Target]
        FROM (
            SELECT -- Constructing Task_Supervisor_Target
                T1.[Task_Supervisor.Task_Supervisor_Source.TaskId], 
                CreateRef(DASContext.Users, row(T1.[Task_Supervisor.Task_Supervisor_Target.UserId]), [SG.DAS.DAL.User]) AS [Task_Supervisor.Task_Supervisor_Target]
            FROM (
                SELECT 
                    T.TaskId AS [Task_Supervisor.Task_Supervisor_Source.TaskId], 
                    T.Supervisor_UserId AS [Task_Supervisor.Task_Supervisor_Target.UserId], 
                    True AS _from0
                FROM CodeFirstDatabase.Task AS T
                WHERE T.Supervisor_UserId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DASContext.Task_System.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Task_System
        [SG.DAS.DAL.Task_System](T3.[Task_System.Task_System_Source], T3.[Task_System.Task_System_Target])
    FROM (
        SELECT -- Constructing Task_System_Source
            CreateRef(DASContext.Tasks, row(T2.[Task_System.Task_System_Source.TaskId]), [SG.DAS.DAL.Task]) AS [Task_System.Task_System_Source], 
            T2.[Task_System.Task_System_Target]
        FROM (
            SELECT -- Constructing Task_System_Target
                T1.[Task_System.Task_System_Source.TaskId], 
                CreateRef(DASContext.Systems, row(T1.[Task_System.Task_System_Target.AppSystemId]), [SG.DAS.DAL.AppSystem]) AS [Task_System.Task_System_Target]
            FROM (
                SELECT 
                    T.TaskId AS [Task_System.Task_System_Source.TaskId], 
                    T.System_AppSystemId AS [Task_System.Task_System_Target.AppSystemId], 
                    True AS _from0
                FROM CodeFirstDatabase.Task AS T
                WHERE T.System_AppSystemId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DASContext.Task_TaskType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Task_TaskType
        [SG.DAS.DAL.Task_TaskType](T3.[Task_TaskType.Task_TaskType_Source], T3.[Task_TaskType.Task_TaskType_Target])
    FROM (
        SELECT -- Constructing Task_TaskType_Source
            CreateRef(DASContext.Tasks, row(T2.[Task_TaskType.Task_TaskType_Source.TaskId]), [SG.DAS.DAL.Task]) AS [Task_TaskType.Task_TaskType_Source], 
            T2.[Task_TaskType.Task_TaskType_Target]
        FROM (
            SELECT -- Constructing Task_TaskType_Target
                T1.[Task_TaskType.Task_TaskType_Source.TaskId], 
                CreateRef(DASContext.TaskTypes, row(T1.[Task_TaskType.Task_TaskType_Target.TaskTypeId]), [SG.DAS.DAL.TaskType]) AS [Task_TaskType.Task_TaskType_Target]
            FROM (
                SELECT 
                    T.TaskId AS [Task_TaskType.Task_TaskType_Source.TaskId], 
                    T.TaskType_TaskTypeId AS [Task_TaskType.Task_TaskType_Target.TaskTypeId], 
                    True AS _from0
                FROM CodeFirstDatabase.Task AS T
                WHERE T.TaskType_TaskTypeId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DASContext.Task_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Task_User
        [SG.DAS.DAL.Task_User](T3.[Task_User.Task_User_Source], T3.[Task_User.Task_User_Target])
    FROM (
        SELECT -- Constructing Task_User_Source
            CreateRef(DASContext.Tasks, row(T2.[Task_User.Task_User_Source.TaskId]), [SG.DAS.DAL.Task]) AS [Task_User.Task_User_Source], 
            T2.[Task_User.Task_User_Target]
        FROM (
            SELECT -- Constructing Task_User_Target
                T1.[Task_User.Task_User_Source.TaskId], 
                CreateRef(DASContext.Users, row(T1.[Task_User.Task_User_Target.UserId]), [SG.DAS.DAL.User]) AS [Task_User.Task_User_Target]
            FROM (
                SELECT 
                    T.TaskId AS [Task_User.Task_User_Source.TaskId], 
                    T.User_UserId AS [Task_User.Task_User_Target.UserId], 
                    True AS _from0
                FROM CodeFirstDatabase.Task AS T
                WHERE T.User_UserId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DASContext.TaskTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskTypes
        [SG.DAS.DAL.TaskType](T1.TaskType_TaskTypeId, T1.TaskType_TaskTypeName)
    FROM (
        SELECT 
            T.TaskTypeId AS TaskType_TaskTypeId, 
            T.TaskTypeName AS TaskType_TaskTypeName, 
            True AS _from0
        FROM CodeFirstDatabase.TaskType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DASContext.User_AppSystems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_AppSystems
        [SG.DAS.DAL.User_AppSystems](T3.[User_AppSystems.User_AppSystems_Source], T3.[User_AppSystems.User_AppSystems_Target])
    FROM (
        SELECT -- Constructing User_AppSystems_Source
            CreateRef(DASContext.Users, row(T2.[User_AppSystems.User_AppSystems_Source.UserId]), [SG.DAS.DAL.User]) AS [User_AppSystems.User_AppSystems_Source], 
            T2.[User_AppSystems.User_AppSystems_Target]
        FROM (
            SELECT -- Constructing User_AppSystems_Target
                T1.[User_AppSystems.User_AppSystems_Source.UserId], 
                CreateRef(DASContext.Systems, row(T1.[User_AppSystems.User_AppSystems_Target.AppSystemId]), [SG.DAS.DAL.AppSystem]) AS [User_AppSystems.User_AppSystems_Target]
            FROM (
                SELECT 
                    T.User_UserId AS [User_AppSystems.User_AppSystems_Source.UserId], 
                    T.AppSystem_AppSystemId AS [User_AppSystems.User_AppSystems_Target.AppSystemId], 
                    True AS _from0
                FROM CodeFirstDatabase.UserAppSystem AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
